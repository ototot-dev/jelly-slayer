// #region License
// // // --------------------------------------------------------------------------------------------------------------------
// // // <summary>
// // //   Â© 2024 Final Factory Florian Schmidt. All rights reserved.
// // //   FinalTaggerUtilities.cs is part of an asset of Final Factory distributed on the Unity Asset Store.
// // //   Usage or distribution of this file is subject to the Unity Asset Store Terms of Service.
// // // </summary>
// // // --------------------------------------------------------------------------------------------------------------------
// #endregion

using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using FinalFactory.Editor.Utilities;
using FinalFactory.Logging;
using UnityEditor;
using UnityEngine;

namespace Finalfactory.Tagger.Editor
{
    [InitializeOnLoad]
    public static class FinalTaggerUtilities
    {
        private static readonly Log Log = LogManager.GetLogger(typeof(FinalTaggerUtilities));

        // Regular expression to match valid C# enum value names
        private static readonly Regex EnumNameRegex = new(@"^[A-Za-z_][A-Za-z0-9_]*$", RegexOptions.Compiled);
        private static readonly Regex InvalidCharsRegex = new(@"[^A-Za-z0-9_]", RegexOptions.Compiled);

        private static readonly EditorDelayedFunction GenerateStaticClassesFunction;

        static FinalTaggerUtilities()
        {
            GenerateStaticClassesFunction = new EditorDelayedFunction(GenerateNewClass, 10f);
            TaggerDataLoaderDefault.OnDataChanged = () => GenerateStaticClasses();
        }

        public static float AutoGenRemainingTime => GenerateStaticClassesFunction.RemainingTime;
        public static bool AutoGenScheduled => GenerateStaticClassesFunction.IsRunning;

        public static bool IsValidName(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return false;

            return EnumNameRegex.IsMatch(input);
        }

        // Method to format a string to a valid C# identifier
        public static string CreateValidIdentifier(string input)
        {
            if (string.IsNullOrWhiteSpace(input))
                throw new ArgumentException("Input cannot be null or whitespace.", nameof(input));

            // Replace invalid characters with an underscore
            var validIdentifier = InvalidCharsRegex.Replace(input, "_");

            // Ensure the first character is a letter or underscore
            if (!char.IsLetter(validIdentifier[0]) && validIdentifier[0] != '_')
                validIdentifier = "_" + validIdentifier;

            // Optionally capitalize the first character (common for class names)
            validIdentifier = char.ToUpper(validIdentifier[0]) + validIdentifier.Substring(1);

            return validIdentifier;
        }

        public static void GenerateStaticClasses(bool force = false)
        {
            if (force)
            {
                GenerateStaticClassesFunction.Cancel();
                GenerateNewClass();
                return;
            }

            GenerateStaticClassesFunction.Trigger();
        }

        public static void GenerateStaticClassesNowIfDirty()
        {
            if (GenerateStaticClassesFunction.IsRunning) GenerateStaticClasses(true);
        }

        private static void GenerateNewClass()
        {
            var taggerGroups = TaggerSystem.Data.GetAllGroups();

            foreach (var group in taggerGroups)
            foreach (var tag in group)
                if (group.GroupName == tag)
                {
                    Log.Fatal(
                        $"Tag and Group name collision: {tag}. Please rename the tag or the group. Aborting static class generation.");
                    return;
                }

            var staticClasses = GenerateStaticClasses(taggerGroups);
            var directoryPath = Path.GetDirectoryName(FinalTaggerPreferences.StaticClassPath);
            if (!Directory.Exists(directoryPath)) Directory.CreateDirectory(directoryPath);
            File.WriteAllText(FinalTaggerPreferences.StaticClassPath, staticClasses);
            AssetDatabase.Refresh();
        }

        private static string GenerateStaticClasses(TaggerGroup[] groups)
        {
            var sb = new StringBuilder();

            sb.AppendLine("// This file is auto-generated by FinalTagger. Do not modify it manually.");

            sb.AppendLine("public static class Tags");
            sb.AppendLine("{");

            sb.AppendLine("    public static readonly string[] All = new string[]");
            sb.AppendLine("    {");
            foreach (var group in groups)
            foreach (var tag in group)
                sb.AppendLine($"        \"{tag}\",");
            sb.AppendLine("    };");

            foreach (var group in groups)
            {
                sb.AppendLine($"    public static class {CreateValidIdentifier(group.GroupName)}");
                sb.AppendLine("    {");

                sb.AppendLine("        public static readonly string[] All = new string[]");
                sb.AppendLine("        {");
                foreach (var tag in group) sb.AppendLine($"            \"{tag}\",");
                sb.AppendLine("        };");


                foreach (var tag in group)
                {
                    var s = CreateValidIdentifier(tag);
                    sb.AppendLine($"        public const string {s} = \"{s}\";");
                }

                sb.AppendLine("    }");
            }

            sb.AppendLine("}");
            return sb.ToString();
        }
    }
}